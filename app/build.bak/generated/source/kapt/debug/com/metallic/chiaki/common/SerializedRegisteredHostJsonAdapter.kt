// Code generated by moshi-kotlin-codegen. Do not edit.
package com.metallic.chiaki.common

import com.metallic.chiaki.lib.Target
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.ByteArray
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class SerializedRegisteredHostJsonAdapter(
  moshi: Moshi
) : JsonAdapter<SerializedRegisteredHost>() {
  private val options: JsonReader.Options = JsonReader.Options.of("target", "ap_ssid", "ap_bssid",
      "ap_key", "ap_name", "server_mac", "server_nickname", "rp_regist_key", "rp_key_type",
      "rp_key")

  private val targetAdapter: JsonAdapter<Target> = moshi.adapter(Target::class.java, emptySet(),
      "target")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "apSsid")

  private val macAddressAdapter: JsonAdapter<MacAddress> = moshi.adapter(MacAddress::class.java,
      emptySet(), "serverMac")

  private val byteArrayAdapter: JsonAdapter<ByteArray> = moshi.adapter(ByteArray::class.java,
      emptySet(), "rpRegistKey")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "rpKeyType")

  override fun toString(): String = buildString(46) {
      append("GeneratedJsonAdapter(").append("SerializedRegisteredHost").append(')') }

  override fun fromJson(reader: JsonReader): SerializedRegisteredHost {
    var target: Target? = null
    var apSsid: String? = null
    var apBssid: String? = null
    var apKey: String? = null
    var apName: String? = null
    var serverMac: MacAddress? = null
    var serverNickname: String? = null
    var rpRegistKey: ByteArray? = null
    var rpKeyType: Int? = null
    var rpKey: ByteArray? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> target = targetAdapter.fromJson(reader) ?: throw Util.unexpectedNull("target",
            "target", reader)
        1 -> apSsid = nullableStringAdapter.fromJson(reader)
        2 -> apBssid = nullableStringAdapter.fromJson(reader)
        3 -> apKey = nullableStringAdapter.fromJson(reader)
        4 -> apName = nullableStringAdapter.fromJson(reader)
        5 -> serverMac = macAddressAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("serverMac", "server_mac", reader)
        6 -> serverNickname = nullableStringAdapter.fromJson(reader)
        7 -> rpRegistKey = byteArrayAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("rpRegistKey", "rp_regist_key", reader)
        8 -> rpKeyType = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("rpKeyType",
            "rp_key_type", reader)
        9 -> rpKey = byteArrayAdapter.fromJson(reader) ?: throw Util.unexpectedNull("rpKey",
            "rp_key", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return SerializedRegisteredHost(
        target = target ?: throw Util.missingProperty("target", "target", reader),
        apSsid = apSsid,
        apBssid = apBssid,
        apKey = apKey,
        apName = apName,
        serverMac = serverMac ?: throw Util.missingProperty("serverMac", "server_mac", reader),
        serverNickname = serverNickname,
        rpRegistKey = rpRegistKey ?: throw Util.missingProperty("rpRegistKey", "rp_regist_key",
            reader),
        rpKeyType = rpKeyType ?: throw Util.missingProperty("rpKeyType", "rp_key_type", reader),
        rpKey = rpKey ?: throw Util.missingProperty("rpKey", "rp_key", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: SerializedRegisteredHost?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("target")
    targetAdapter.toJson(writer, value.target)
    writer.name("ap_ssid")
    nullableStringAdapter.toJson(writer, value.apSsid)
    writer.name("ap_bssid")
    nullableStringAdapter.toJson(writer, value.apBssid)
    writer.name("ap_key")
    nullableStringAdapter.toJson(writer, value.apKey)
    writer.name("ap_name")
    nullableStringAdapter.toJson(writer, value.apName)
    writer.name("server_mac")
    macAddressAdapter.toJson(writer, value.serverMac)
    writer.name("server_nickname")
    nullableStringAdapter.toJson(writer, value.serverNickname)
    writer.name("rp_regist_key")
    byteArrayAdapter.toJson(writer, value.rpRegistKey)
    writer.name("rp_key_type")
    intAdapter.toJson(writer, value.rpKeyType)
    writer.name("rp_key")
    byteArrayAdapter.toJson(writer, value.rpKey)
    writer.endObject()
  }
}
