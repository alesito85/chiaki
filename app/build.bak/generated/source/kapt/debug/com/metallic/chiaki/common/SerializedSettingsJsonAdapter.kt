// Code generated by moshi-kotlin-codegen. Do not edit.
package com.metallic.chiaki.common

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class SerializedSettingsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<SerializedSettings>() {
  private val options: JsonReader.Options = JsonReader.Options.of("registered_hosts",
      "manual_hosts")

  private val listOfSerializedRegisteredHostAdapter: JsonAdapter<List<SerializedRegisteredHost>> =
      moshi.adapter(Types.newParameterizedType(List::class.java,
      SerializedRegisteredHost::class.java), emptySet(), "registeredHosts")

  private val listOfSerializedManualHostAdapter: JsonAdapter<List<SerializedManualHost>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, SerializedManualHost::class.java),
      emptySet(), "manualHosts")

  override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("SerializedSettings").append(')') }

  override fun fromJson(reader: JsonReader): SerializedSettings {
    var registeredHosts: List<SerializedRegisteredHost>? = null
    var manualHosts: List<SerializedManualHost>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> registeredHosts = listOfSerializedRegisteredHostAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("registeredHosts", "registered_hosts", reader)
        1 -> manualHosts = listOfSerializedManualHostAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("manualHosts", "manual_hosts", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return SerializedSettings(
        registeredHosts = registeredHosts ?: throw Util.missingProperty("registeredHosts",
            "registered_hosts", reader),
        manualHosts = manualHosts ?: throw Util.missingProperty("manualHosts", "manual_hosts",
            reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: SerializedSettings?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("registered_hosts")
    listOfSerializedRegisteredHostAdapter.toJson(writer, value.registeredHosts)
    writer.name("manual_hosts")
    listOfSerializedManualHostAdapter.toJson(writer, value.manualHosts)
    writer.endObject()
  }
}
