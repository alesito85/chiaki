// Generated by view binder compiler. Do not edit!
package com.metallic.chiaki.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textview.MaterialTextView;
import com.metallic.chiaki.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final FloatingActionButton addManualButton;

  @NonNull
  public final MaterialButton addManualLabelButton;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final ImageView emptyInfoImageView;

  @NonNull
  public final LinearLayout emptyInfoLayout;

  @NonNull
  public final MaterialTextView emptyInfoTextView;

  @NonNull
  public final FloatingActionButton floatingActionButton;

  @NonNull
  public final LinearLayout floatingActionButtonDial;

  @NonNull
  public final FrameLayout floatingActionButtonDialBackground;

  @NonNull
  public final RecyclerView hostsRecyclerView;

  @NonNull
  public final FloatingActionButton registerButton;

  @NonNull
  public final MaterialButton registerLabelButton;

  @NonNull
  public final CoordinatorLayout rootLayout;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView,
      @NonNull FloatingActionButton addManualButton, @NonNull MaterialButton addManualLabelButton,
      @NonNull AppBarLayout appBarLayout, @NonNull ImageView emptyInfoImageView,
      @NonNull LinearLayout emptyInfoLayout, @NonNull MaterialTextView emptyInfoTextView,
      @NonNull FloatingActionButton floatingActionButton,
      @NonNull LinearLayout floatingActionButtonDial,
      @NonNull FrameLayout floatingActionButtonDialBackground,
      @NonNull RecyclerView hostsRecyclerView, @NonNull FloatingActionButton registerButton,
      @NonNull MaterialButton registerLabelButton, @NonNull CoordinatorLayout rootLayout,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.addManualButton = addManualButton;
    this.addManualLabelButton = addManualLabelButton;
    this.appBarLayout = appBarLayout;
    this.emptyInfoImageView = emptyInfoImageView;
    this.emptyInfoLayout = emptyInfoLayout;
    this.emptyInfoTextView = emptyInfoTextView;
    this.floatingActionButton = floatingActionButton;
    this.floatingActionButtonDial = floatingActionButtonDial;
    this.floatingActionButtonDialBackground = floatingActionButtonDialBackground;
    this.hostsRecyclerView = hostsRecyclerView;
    this.registerButton = registerButton;
    this.registerLabelButton = registerLabelButton;
    this.rootLayout = rootLayout;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addManualButton;
      FloatingActionButton addManualButton = rootView.findViewById(id);
      if (addManualButton == null) {
        break missingId;
      }

      id = R.id.addManualLabelButton;
      MaterialButton addManualLabelButton = rootView.findViewById(id);
      if (addManualLabelButton == null) {
        break missingId;
      }

      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = rootView.findViewById(id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.emptyInfoImageView;
      ImageView emptyInfoImageView = rootView.findViewById(id);
      if (emptyInfoImageView == null) {
        break missingId;
      }

      id = R.id.emptyInfoLayout;
      LinearLayout emptyInfoLayout = rootView.findViewById(id);
      if (emptyInfoLayout == null) {
        break missingId;
      }

      id = R.id.emptyInfoTextView;
      MaterialTextView emptyInfoTextView = rootView.findViewById(id);
      if (emptyInfoTextView == null) {
        break missingId;
      }

      id = R.id.floatingActionButton;
      FloatingActionButton floatingActionButton = rootView.findViewById(id);
      if (floatingActionButton == null) {
        break missingId;
      }

      id = R.id.floatingActionButtonDial;
      LinearLayout floatingActionButtonDial = rootView.findViewById(id);
      if (floatingActionButtonDial == null) {
        break missingId;
      }

      id = R.id.floatingActionButtonDialBackground;
      FrameLayout floatingActionButtonDialBackground = rootView.findViewById(id);
      if (floatingActionButtonDialBackground == null) {
        break missingId;
      }

      id = R.id.hostsRecyclerView;
      RecyclerView hostsRecyclerView = rootView.findViewById(id);
      if (hostsRecyclerView == null) {
        break missingId;
      }

      id = R.id.registerButton;
      FloatingActionButton registerButton = rootView.findViewById(id);
      if (registerButton == null) {
        break missingId;
      }

      id = R.id.registerLabelButton;
      MaterialButton registerLabelButton = rootView.findViewById(id);
      if (registerLabelButton == null) {
        break missingId;
      }

      CoordinatorLayout rootLayout = (CoordinatorLayout) rootView;

      id = R.id.toolbar;
      MaterialToolbar toolbar = rootView.findViewById(id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, addManualButton,
          addManualLabelButton, appBarLayout, emptyInfoImageView, emptyInfoLayout,
          emptyInfoTextView, floatingActionButton, floatingActionButtonDial,
          floatingActionButtonDialBackground, hostsRecyclerView, registerButton,
          registerLabelButton, rootLayout, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
