// Generated by view binder compiler. Do not edit!
package com.metallic.chiaki.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import com.metallic.chiaki.R;
import com.metallic.chiaki.touchcontrols.AnalogStickView;
import com.metallic.chiaki.touchcontrols.ButtonView;
import com.metallic.chiaki.touchcontrols.DPadView;
import com.metallic.chiaki.touchcontrols.TouchpadView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentControlsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ButtonView boxButtonView;

  @NonNull
  public final Guideline centerGuideline;

  @NonNull
  public final ButtonView crossButtonView;

  @NonNull
  public final DPadView dpadView;

  @NonNull
  public final ConstraintLayout faceButtonsLayout;

  @NonNull
  public final ButtonView l1ButtonView;

  @NonNull
  public final ButtonView l2ButtonView;

  @NonNull
  public final ButtonView l3ButtonView;

  @NonNull
  public final AnalogStickView leftAnalogStickView;

  @NonNull
  public final ButtonView moonButtonView;

  @NonNull
  public final ButtonView optionsButtonView;

  @NonNull
  public final ButtonView psButtonView;

  @NonNull
  public final ButtonView pyramidButtonView;

  @NonNull
  public final ButtonView r1ButtonView;

  @NonNull
  public final ButtonView r2ButtonView;

  @NonNull
  public final ButtonView r3ButtonView;

  @NonNull
  public final AnalogStickView rightAnalogStickView;

  @NonNull
  public final ButtonView shareButtonView;

  @NonNull
  public final TouchpadView touchpadView;

  private FragmentControlsBinding(@NonNull ConstraintLayout rootView,
      @NonNull ButtonView boxButtonView, @NonNull Guideline centerGuideline,
      @NonNull ButtonView crossButtonView, @NonNull DPadView dpadView,
      @NonNull ConstraintLayout faceButtonsLayout, @NonNull ButtonView l1ButtonView,
      @NonNull ButtonView l2ButtonView, @NonNull ButtonView l3ButtonView,
      @NonNull AnalogStickView leftAnalogStickView, @NonNull ButtonView moonButtonView,
      @NonNull ButtonView optionsButtonView, @NonNull ButtonView psButtonView,
      @NonNull ButtonView pyramidButtonView, @NonNull ButtonView r1ButtonView,
      @NonNull ButtonView r2ButtonView, @NonNull ButtonView r3ButtonView,
      @NonNull AnalogStickView rightAnalogStickView, @NonNull ButtonView shareButtonView,
      @NonNull TouchpadView touchpadView) {
    this.rootView = rootView;
    this.boxButtonView = boxButtonView;
    this.centerGuideline = centerGuideline;
    this.crossButtonView = crossButtonView;
    this.dpadView = dpadView;
    this.faceButtonsLayout = faceButtonsLayout;
    this.l1ButtonView = l1ButtonView;
    this.l2ButtonView = l2ButtonView;
    this.l3ButtonView = l3ButtonView;
    this.leftAnalogStickView = leftAnalogStickView;
    this.moonButtonView = moonButtonView;
    this.optionsButtonView = optionsButtonView;
    this.psButtonView = psButtonView;
    this.pyramidButtonView = pyramidButtonView;
    this.r1ButtonView = r1ButtonView;
    this.r2ButtonView = r2ButtonView;
    this.r3ButtonView = r3ButtonView;
    this.rightAnalogStickView = rightAnalogStickView;
    this.shareButtonView = shareButtonView;
    this.touchpadView = touchpadView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentControlsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentControlsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_controls, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentControlsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.boxButtonView;
      ButtonView boxButtonView = rootView.findViewById(id);
      if (boxButtonView == null) {
        break missingId;
      }

      id = R.id.centerGuideline;
      Guideline centerGuideline = rootView.findViewById(id);
      if (centerGuideline == null) {
        break missingId;
      }

      id = R.id.crossButtonView;
      ButtonView crossButtonView = rootView.findViewById(id);
      if (crossButtonView == null) {
        break missingId;
      }

      id = R.id.dpadView;
      DPadView dpadView = rootView.findViewById(id);
      if (dpadView == null) {
        break missingId;
      }

      id = R.id.faceButtonsLayout;
      ConstraintLayout faceButtonsLayout = rootView.findViewById(id);
      if (faceButtonsLayout == null) {
        break missingId;
      }

      id = R.id.l1ButtonView;
      ButtonView l1ButtonView = rootView.findViewById(id);
      if (l1ButtonView == null) {
        break missingId;
      }

      id = R.id.l2ButtonView;
      ButtonView l2ButtonView = rootView.findViewById(id);
      if (l2ButtonView == null) {
        break missingId;
      }

      id = R.id.l3ButtonView;
      ButtonView l3ButtonView = rootView.findViewById(id);
      if (l3ButtonView == null) {
        break missingId;
      }

      id = R.id.leftAnalogStickView;
      AnalogStickView leftAnalogStickView = rootView.findViewById(id);
      if (leftAnalogStickView == null) {
        break missingId;
      }

      id = R.id.moonButtonView;
      ButtonView moonButtonView = rootView.findViewById(id);
      if (moonButtonView == null) {
        break missingId;
      }

      id = R.id.optionsButtonView;
      ButtonView optionsButtonView = rootView.findViewById(id);
      if (optionsButtonView == null) {
        break missingId;
      }

      id = R.id.psButtonView;
      ButtonView psButtonView = rootView.findViewById(id);
      if (psButtonView == null) {
        break missingId;
      }

      id = R.id.pyramidButtonView;
      ButtonView pyramidButtonView = rootView.findViewById(id);
      if (pyramidButtonView == null) {
        break missingId;
      }

      id = R.id.r1ButtonView;
      ButtonView r1ButtonView = rootView.findViewById(id);
      if (r1ButtonView == null) {
        break missingId;
      }

      id = R.id.r2ButtonView;
      ButtonView r2ButtonView = rootView.findViewById(id);
      if (r2ButtonView == null) {
        break missingId;
      }

      id = R.id.r3ButtonView;
      ButtonView r3ButtonView = rootView.findViewById(id);
      if (r3ButtonView == null) {
        break missingId;
      }

      id = R.id.rightAnalogStickView;
      AnalogStickView rightAnalogStickView = rootView.findViewById(id);
      if (rightAnalogStickView == null) {
        break missingId;
      }

      id = R.id.shareButtonView;
      ButtonView shareButtonView = rootView.findViewById(id);
      if (shareButtonView == null) {
        break missingId;
      }

      id = R.id.touchpadView;
      TouchpadView touchpadView = rootView.findViewById(id);
      if (touchpadView == null) {
        break missingId;
      }

      return new FragmentControlsBinding((ConstraintLayout) rootView, boxButtonView,
          centerGuideline, crossButtonView, dpadView, faceButtonsLayout, l1ButtonView, l2ButtonView,
          l3ButtonView, leftAnalogStickView, moonButtonView, optionsButtonView, psButtonView,
          pyramidButtonView, r1ButtonView, r2ButtonView, r3ButtonView, rightAnalogStickView,
          shareButtonView, touchpadView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
